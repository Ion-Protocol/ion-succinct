{
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientETHBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepositDataRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidETHWithdrawCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubKeys",
          "type": "bytes[]"
        }
      ],
      "name": "ValidatorsSetup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getWithdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "withdrawalCredentials",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_pubKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "_depositDataRoot",
          "type": "bytes32"
        }
      ],
      "name": "setupValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getWithdrawalCredentials()": "56396715",
    "setupValidators(bytes[],bytes32)": "2b8e227d",
    "withdrawERC20(address)": "f4f3b200"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientETHBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositDataRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidETHWithdrawCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"ValidatorsSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"_depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"setupValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"https://github.com/max-taylor\",\"errors\":{\"InsufficientETHBalance()\":[{\"details\":\"Error thrown when setting up new validators and the contract doesn't hold enough ETH to be able to set them up.\"}],\"InvalidDepositDataRoot()\":[{\"details\":\"Error thrown when the depositDataRoot parameter in the setupValidators contract doesn't match the onchain deposit data root from the deposit contract\"}],\"InvalidETHWithdrawCaller()\":[{\"details\":\"Error thrown when calling the withdrawETH method from an account that isn't the swETH contract\"}]},\"events\":{\"ETHReceived(address,uint256)\":{\"details\":\"Event is fired when some contracts receive ETH\",\"params\":{\"amount\":\"The amount of ETH received\",\"from\":\"The account that sent the ETH\"}},\"ValidatorsSetup(bytes[])\":{\"params\":{\"pubKeys\":\"The pubKeys that have been used for validator setup\"}}},\"kind\":\"dev\",\"methods\":{\"getWithdrawalCredentials()\":{\"details\":\"Formats ETH1 the withdrawal credentials according to the following standard: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#eth1_address_withdrawal_prefixIt doesn't outline the withdrawal prefixes, they can be found here: https://eth2book.info/altair/part3/config/constants#withdrawal-prefixesAs the DepositManager on the execution layer is going to be the withdrawal contract, we will be doing ETH1 withdrawals. The standard for this is a 32 byte response where; the first byte stores the withdrawal prefix (0x01), the following 11 bytes are empty and the last 20 bytes are the address\"},\"setupValidators(bytes[],bytes32)\":{\"details\":\"This method allows setting up of new validators in the beacon deposit contract, it ensures the provided pubKeys are unused in the NO registry\",\"params\":{\"_depositDataRoot\":\"The deposit contracts deposit root which MUST match the current beacon deposit contract deposit data root otherwise the contract will revert due to the risk of the front-running vulnerability.\",\"_pubKeys\":\"The pubKeys to setup\"}},\"withdrawERC20(address)\":{\"details\":\"This method withdraws contract's _token balance to a platform admin\",\"params\":{\"_token\":\"The ERC20 token to withdraw from the contract\"}}},\"title\":\"IDepositManager\",\"version\":1},\"userdoc\":{\"events\":{\"ValidatorsSetup(bytes[])\":{\"notice\":\"Emitted when new validators are setup\"}},\"kind\":\"user\",\"methods\":{\"setupValidators(bytes[],bytes32)\":{\"notice\":\"An off-chain service provides front-running protection by validating each pubKey ensuring that it hasn't been used for a validator setup. This service snapshots the depositDataRoot of the deposit contract, then this value is re-read from the deposit contract within setupValdiators() and ensures that they match, this consistency provides the front-running protection. Read more here: https://research.lido.fi/t/mitigations-for-deposit-front-running-vulnerability/1239\"}},\"notice\":\"The interface for the deposit manager contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"out/NodeOperatorRegistry/contracts/interfaces/IDepositManager.sol\":\"IDepositManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"out/NodeOperatorRegistry/contracts/interfaces/IDepositManager.sol\":{\"keccak256\":\"0x55d2a3297326c2e07bf64326fb185146b1fdb0edf9b848a70feea25cf576eff3\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d2028d72c1c5e920363fdbc19edf4098d24fcd78f30f560bd70f940421b3df46\",\"dweb:/ipfs/QmNvh5aP6N4FxvNVw1RBqTGou6LX27S6uDc5bFpy3K6WwV\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientETHBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidDepositDataRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidETHWithdrawCaller"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ETHReceived",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "pubKeys",
              "type": "bytes[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ValidatorsSetup",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawalCredentials",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "withdrawalCredentials",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "_pubKeys",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes32",
              "name": "_depositDataRoot",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setupValidators"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_token",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawERC20"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getWithdrawalCredentials()": {
            "details": "Formats ETH1 the withdrawal credentials according to the following standard: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#eth1_address_withdrawal_prefixIt doesn't outline the withdrawal prefixes, they can be found here: https://eth2book.info/altair/part3/config/constants#withdrawal-prefixesAs the DepositManager on the execution layer is going to be the withdrawal contract, we will be doing ETH1 withdrawals. The standard for this is a 32 byte response where; the first byte stores the withdrawal prefix (0x01), the following 11 bytes are empty and the last 20 bytes are the address"
          },
          "setupValidators(bytes[],bytes32)": {
            "details": "This method allows setting up of new validators in the beacon deposit contract, it ensures the provided pubKeys are unused in the NO registry",
            "params": {
              "_depositDataRoot": "The deposit contracts deposit root which MUST match the current beacon deposit contract deposit data root otherwise the contract will revert due to the risk of the front-running vulnerability.",
              "_pubKeys": "The pubKeys to setup"
            }
          },
          "withdrawERC20(address)": {
            "details": "This method withdraws contract's _token balance to a platform admin",
            "params": {
              "_token": "The ERC20 token to withdraw from the contract"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "setupValidators(bytes[],bytes32)": {
            "notice": "An off-chain service provides front-running protection by validating each pubKey ensuring that it hasn't been used for a validator setup. This service snapshots the depositDataRoot of the deposit contract, then this value is re-read from the deposit contract within setupValdiators() and ensures that they match, this consistency provides the front-running protection. Read more here: https://research.lido.fi/t/mitigations-for-deposit-front-running-vulnerability/1239"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "out/NodeOperatorRegistry/contracts/interfaces/IDepositManager.sol": "IDepositManager"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "out/NodeOperatorRegistry/contracts/interfaces/IDepositManager.sol": {
        "keccak256": "0x55d2a3297326c2e07bf64326fb185146b1fdb0edf9b848a70feea25cf576eff3",
        "urls": [
          "bzz-raw://d2028d72c1c5e920363fdbc19edf4098d24fcd78f30f560bd70f940421b3df46",
          "dweb:/ipfs/QmNvh5aP6N4FxvNVw1RBqTGou6LX27S6uDc5bFpy3K6WwV"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "ast": {
    "absolutePath": "out/NodeOperatorRegistry/contracts/interfaces/IDepositManager.sol",
    "id": 3911,
    "exportedSymbols": {
      "IDepositManager": [
        3910
      ],
      "IERC20": [
        1365
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:3304:12",
    "nodes": [
      {
        "id": 3862,
        "nodeType": "PragmaDirective",
        "src": "39:23:12",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 3864,
        "nodeType": "ImportDirective",
        "src": "64:70:12",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3911,
        "sourceUnit": 1366,
        "symbolAliases": [
          {
            "foreign": {
              "id": 3863,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1365,
              "src": "72:6:12",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 3910,
        "nodeType": "ContractDefinition",
        "src": "269:3073:12",
        "nodes": [
          {
            "id": 3868,
            "nodeType": "ErrorDefinition",
            "src": "442:33:12",
            "nodes": [],
            "documentation": {
              "id": 3866,
              "nodeType": "StructuredDocumentation",
              "src": "325:114:12",
              "text": " @dev Error thrown when calling the withdrawETH method from an account that isn't the swETH contract"
            },
            "errorSelector": "1e0809e2",
            "name": "InvalidETHWithdrawCaller",
            "nameLocation": "448:24:12",
            "parameters": {
              "id": 3867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "472:2:12"
            }
          },
          {
            "id": 3871,
            "nodeType": "ErrorDefinition",
            "src": "651:31:12",
            "nodes": [],
            "documentation": {
              "id": 3869,
              "nodeType": "StructuredDocumentation",
              "src": "479:169:12",
              "text": " @dev Error thrown when the depositDataRoot parameter in the setupValidators contract doesn't match the onchain deposit data root from the deposit contract"
            },
            "errorSelector": "511fc763",
            "name": "InvalidDepositDataRoot",
            "nameLocation": "657:22:12",
            "parameters": {
              "id": 3870,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "679:2:12"
            }
          },
          {
            "id": 3874,
            "nodeType": "ErrorDefinition",
            "src": "820:31:12",
            "nodes": [],
            "documentation": {
              "id": 3872,
              "nodeType": "StructuredDocumentation",
              "src": "686:131:12",
              "text": " @dev Error thrown when setting up new validators and the contract doesn't hold enough ETH to be able to set them up."
            },
            "errorSelector": "bbb20aae",
            "name": "InsufficientETHBalance",
            "nameLocation": "826:22:12",
            "parameters": {
              "id": 3873,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "848:2:12"
            }
          },
          {
            "id": 3880,
            "nodeType": "EventDefinition",
            "src": "1008:39:12",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 3875,
              "nodeType": "StructuredDocumentation",
              "src": "881:124:12",
              "text": " Emitted when new validators are setup\n @param pubKeys The pubKeys that have been used for validator setup"
            },
            "eventSelector": "ffb1367626264d9733e4dcd7f14cd59fc3a2c15d50d1a41f1ee60c96f77a01dd",
            "name": "ValidatorsSetup",
            "nameLocation": "1014:15:12",
            "parameters": {
              "id": 3879,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3878,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "pubKeys",
                  "nameLocation": "1038:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3880,
                  "src": "1030:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3876,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "1030:5:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 3877,
                    "nodeType": "ArrayTypeName",
                    "src": "1030:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1029:17:12"
            }
          },
          {
            "id": 3887,
            "nodeType": "EventDefinition",
            "src": "1213:56:12",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 3881,
              "nodeType": "StructuredDocumentation",
              "src": "1051:159:12",
              "text": " @dev Event is fired when some contracts receive ETH\n @param from The account that sent the ETH\n @param amount The amount of ETH received"
            },
            "eventSelector": "bfe611b001dfcd411432f7bf0d79b82b4b2ee81511edac123a3403c357fb972a",
            "name": "ETHReceived",
            "nameLocation": "1219:11:12",
            "parameters": {
              "id": 3886,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3883,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1247:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3887,
                  "src": "1231:20:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3882,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1231:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3885,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1261:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3887,
                  "src": "1253:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3884,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1253:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1230:38:12"
            }
          },
          {
            "id": 3894,
            "nodeType": "FunctionDefinition",
            "src": "1506:47:12",
            "nodes": [],
            "documentation": {
              "id": 3888,
              "nodeType": "StructuredDocumentation",
              "src": "1351:152:12",
              "text": " @dev This method withdraws contract's _token balance to a platform admin\n @param _token The ERC20 token to withdraw from the contract"
            },
            "functionSelector": "f4f3b200",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawERC20",
            "nameLocation": "1515:13:12",
            "parameters": {
              "id": 3892,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3891,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "1536:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3894,
                  "src": "1529:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$1365",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 3890,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3889,
                      "name": "IERC20",
                      "nameLocations": [
                        "1529:6:12"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1365,
                      "src": "1529:6:12"
                    },
                    "referencedDeclaration": 1365,
                    "src": "1529:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1365",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1528:15:12"
            },
            "returnParameters": {
              "id": 3893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1552:0:12"
            },
            "scope": 3910,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3900,
            "nodeType": "FunctionDefinition",
            "src": "2220:107:12",
            "nodes": [],
            "documentation": {
              "id": 3895,
              "nodeType": "StructuredDocumentation",
              "src": "1557:660:12",
              "text": " @dev Formats ETH1 the withdrawal credentials according to the following standard: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#eth1_address_withdrawal_prefix\n @dev It doesn't outline the withdrawal prefixes, they can be found here: https://eth2book.info/altair/part3/config/constants#withdrawal-prefixes\n @dev As the DepositManager on the execution layer is going to be the withdrawal contract, we will be doing ETH1 withdrawals. The standard for this is a 32 byte response where; the first byte stores the withdrawal prefix (0x01), the following 11 bytes are empty and the last 20 bytes are the address"
            },
            "functionSelector": "56396715",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWithdrawalCredentials",
            "nameLocation": "2229:24:12",
            "parameters": {
              "id": 3896,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2253:2:12"
            },
            "returnParameters": {
              "id": 3899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3898,
                  "mutability": "mutable",
                  "name": "withdrawalCredentials",
                  "nameLocation": "2304:21:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3900,
                  "src": "2291:34:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3897,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2291:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2290:36:12"
            },
            "scope": 3910,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3909,
            "nodeType": "FunctionDefinition",
            "src": "3241:99:12",
            "nodes": [],
            "documentation": {
              "id": 3901,
              "nodeType": "StructuredDocumentation",
              "src": "2331:907:12",
              "text": " @dev This method allows setting up of new validators in the beacon deposit contract, it ensures the provided pubKeys are unused in the NO registry\n @notice An off-chain service provides front-running protection by validating each pubKey ensuring that it hasn't been used for a validator setup. This service snapshots the depositDataRoot of the deposit contract, then this value is re-read from the deposit contract within setupValdiators() and ensures that they match, this consistency provides the front-running protection. Read more here: https://research.lido.fi/t/mitigations-for-deposit-front-running-vulnerability/1239\n @param _pubKeys The pubKeys to setup\n @param _depositDataRoot The deposit contracts deposit root which MUST match the current beacon deposit contract deposit data root otherwise the contract will revert due to the risk of the front-running vulnerability."
            },
            "functionSelector": "2b8e227d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setupValidators",
            "nameLocation": "3250:15:12",
            "parameters": {
              "id": 3907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3904,
                  "mutability": "mutable",
                  "name": "_pubKeys",
                  "nameLocation": "3288:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3909,
                  "src": "3271:25:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3902,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "3271:5:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 3903,
                    "nodeType": "ArrayTypeName",
                    "src": "3271:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3906,
                  "mutability": "mutable",
                  "name": "_depositDataRoot",
                  "nameLocation": "3310:16:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3909,
                  "src": "3302:24:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3905,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3302:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3265:65:12"
            },
            "returnParameters": {
              "id": 3908,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3339:0:12"
            },
            "scope": 3910,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IDepositManager",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3865,
          "nodeType": "StructuredDocumentation",
          "src": "136:132:12",
          "text": " @title IDepositManager\n @author https://github.com/max-taylor\n @notice The interface for the deposit manager contract"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          3910
        ],
        "name": "IDepositManager",
        "nameLocation": "279:15:12",
        "scope": 3911,
        "usedErrors": [
          3868,
          3871,
          3874
        ]
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 12
}